// https://codeforces.com/contest/1777/problem/C 
#include <iostream> 
#include <algorithm> 
#include <cstdio> 
#include <vector> 
#include <map> 
#include <cmath> 
#include <set> 
using namespace std; 
#define maxn 100001 
int n, m, t; 
vector<int> divisors[maxn]; 
void div(int k) {
    for (int i = 1; i <= (int) sqrt(k); i++) {
        if (k % i == 0) {
            if (k / i == i) { // If divisors are equal, include only one  
                divisors[k].push_back(i); 
            }
            else { // Otherwise include both 
                divisors[k].push_back(i); 
                divisors[k].push_back(k / i); 
            }
        }
    } 
    sort(divisors[k].begin(), divisors[k].end());  
}  
void solve() {
    cin >> n >> m; 
    vector<int> v(n); 
    int res = INT_MAX, cnt = 0, R = 0; 
    for (int i = 0; i < n; i++) {
        cin >> v[i]; 
    }  
    sort(v.rbegin(), v.rend());        
    map<int, int> d; 
    for (int i = 0; i < n; i++) {
        for (int j : divisors[v[i]]) {
            if (j > m) break; 
            if (d[j] == 0) cnt++;      
            d[j]++; 
        }
        while (cnt == m) { 
            res = min(res, v[R] - v[i]);      
            for (int j : divisors[v[R]]) {  
                if (j > m) break; 
                d[j]--; 
                if (d[j] == 0) cnt--;      
            }  
            R++; 
        }
    }
    if (res == INT_MAX) cout << -1 << endl; 
    else cout << res << endl; 
}
int main() { 
    for (int i = 1; i < maxn; i++) {
        div(i); 
    }  
    cin >> t; 
    while (t--) solve(); 
}
