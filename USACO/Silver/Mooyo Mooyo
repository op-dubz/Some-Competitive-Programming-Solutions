// https://usaco.org/index.php?page=viewproblem2&cpid=860 
#include <iostream> 
#include <vector> 
#include <algorithm> 
#include <deque> 
#include <cstdio> 
using namespace std; 
#define pii pair<int,int> 
#define ff first 
#define ss second 
#define mp make_pair 
int n, k; 
deque<pii> v; 
int grid[101][10]; 
bool smth = true; 
int dr[4] = {0,0,1,-1}; 
int dc[4] = {1,-1,0,0}; 
vector<vector<bool> > visited(100, vector<bool>(10, false)); 
bool inBounds(int r, int c) {
    return r >= 0 && r < n && c >= 0 && c < 10; 
}
void dfs(int r, int c, int val) { 
    visited[r][c] = true; 
    v.push_back(mp(r, c)); 
    for (int i = 0; i < 4; i++) {
        int rr = dr[i] + r, cc = dc[i] + c; 
        if (inBounds(rr, cc) && !visited[rr][cc] && grid[rr][cc] == val) dfs(rr, cc, val);    
    }
}
int main() { 
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); 
    freopen("mooyomooyo.in", "r", stdin); 
    freopen("mooyomooyo.out", "w", stdout); 
    cin >> n >> k; 
    for (int i = 0; i < n; i++) { 
        string s; 
        cin >> s; 
        for (int j = 0; j < 10; j++) { 
            grid[i][j] = s[j] - '0'; 
        } 
    } 
    while (smth) { 
        smth = false; 
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 10; j++) {
                if (!visited[i][j] && grid[i][j]) { 
                    dfs(i, j, grid[i][j]); 
                    if (v.size() >= k) { 
                        smth = true; 
                        while (!v.empty()) {
                            pii o = v.front(); 
                            grid[o.ff][o.ss] = 0;   
                            v.pop_front(); 
                        }  
                    } 
                    else v.clear(); 
                }
            } 
        } 
        visited.assign(n, vector<bool>(10, false)); 
        for (int j = 0; j < 10; j++) {   
            int cur = n - 1; 
            for (int i = n - 1; i >= 0; i--) {
                if (grid[i][j]) {
                    swap(grid[cur][j], grid[i][j]); 
                    cur--; 
                }
            }
        } 
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 10; j++) {
            cout << grid[i][j]; 
        }
        cout << endl; 
    }
} 

